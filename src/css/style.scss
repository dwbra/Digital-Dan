//SCSS Syntaxes to use throughout my styling//
$primary-color: #25c2c7;

@mixin bold-italic {
    font-weight: bold;
    font-style: italic;
}

@mixin mainfont {
    font-family: 'Poppins', sans-serif;
    font-size: 18px;
    color: white;
}

@mixin blogfont {
    font-family: 'Poppins', sans-serif;
    font-size: 14px;
    color: white;
    font-style: italic;
}

//General Styling for All Header Elements and Paragraph//
h1, h2, h3, h4, h5, h6, a, button {
    font-family: 'Lato', sans-serif;
}

h2 {
    font-size: 32px;
    letter-spacing: 2px;
}

h3 {
    font-size: 26px;
    letter-spacing: 1.5px;
}

h4 {
    font-size: 20px;
    letter-spacing: 1px;
}

p {
   font-family: 'Poppins', sans-serif;
   font-size: 18px;
}

body {
    background-color: black;
    margin: 0;
    color: white;   
}

main {
    padding-left: 50px;
    padding-right: 50px;
}

//Styling for the Button - Including an arrow on hover//
button {
    background-color: $primary-color;
    color: white;
    padding: 10px;
    border: none;
    font-size: 18px;
    text-align: center;
    width: 160px;
    transition: all 0.5s;
    cursor: pointer;
    border-radius: 25px;
}

.button span {
    cursor: pointer;
    display: inline-block;
    position: relative;
    transition: 0.5s;
  }

  .button span:after {
  content: '\00bb';
  position: absolute;
  opacity: 0;
  top: -14px;
  right: -20px;
  transition: 0.5s;
  font-size: 36px;
}

.button:hover span {
  padding-right: 25px;
}

.button:hover span:after {
  opacity: 1;
  right: 0;
}

.button:hover {
    background-color: transparent;
    border: 2px solid $primary-color;
}

.button:after {
    transform: none;
}


// Styling the navigation menu //
.nav {
    color: white;
    a {
        color: white;
        text-decoration: none;
        border: black 2px solid;
        box-shadow: black 3px 3px;
        margin: 5px;
        padding: 10px;
        position: relative;
        top: 30px; 
    }
    a:hover {
        background-color: black;
    }
}

//Using flex to position the content in my nav div at the end of the column. This is pushing the menu to the right hand side of the page.//
.navgrid-flexend {
    display: flex;
    justify-content: flex-end;
}

//Styling social icons //
.iconify { 
    width: 40px; 
    height: 40px;
}

.iconify:hover {
    color: black;
}

//Styling the social bars layout //
.social {
    background-color: $primary-color;
    display: flex;
    justify-content: flex-end;
    padding-right: 100px;
    a {
        color: white;
    }
}


// .portfolio-section {
//     padding-left: 200px;
//     padding-top: 40px;
// }

//Styling for Headshot hover greyscale //
.headshot-grayscale {
    filter: none;
    -webkit-filter: grayscale(0%);
  }
  
  .headshot-grayscale:hover {
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
    filter: gray;
    -webkit-filter: grayscale(100%);
  }

//Forcing the headshot image to be 400x400px on desktop view//
#headshot {
    width: 400px;
    height: 400px;
}

//Styling to force the logo width and hover changes //
#logo {
    max-width: 90px;
    max-height: 100px;
}

#logo:hover {
    transform: scale(0.8);
}

#logotext {
    text-decoration: none;
}

#logotext:hover {
    transform: scale(0.8);
    transition: all 0.5s;
}

#logotext:visited {
    color: white;
    text-decoration: none;
}

#logotext:link {
    color: white;
    text-decoration: none;
}

//Positinging the introtext section on my homepage //
#introtext {
    margin-right: 60px;
    text-align: left;
}


//This is the CSS for Desktop View //

//The below css hides the hamburger menu on screens with a size larger than 1042px//

@media only screen and (min-width: 1024px) {
    .hamburger {
        display: none;
    }
}

//This is the CSS for Mobile View //

//The below CSS is to control how the website is displayed on mobile devices with a screen size of up to 767px.//
//Majority of the CSS for mobile is reducing image sizes to ensure that the content fits the screen size.//
//There is additional styling to control how the hamburger menu appears and looks. 

@media only screen and (max-width: 767px) {
    .social {
        display: none;
    }
    #logotext {
        display: none;
    }
    .contact {
      padding: 25px;
    }
    #headshot {
      height: 150px;
      width: 150px;
    }
  .navgrid-flexend {
      display: none;
    }
  .hamburger {
    position: absolute;
    left: 80%;
    top: 2%;
    }
  .nav {
    color: white;
    font-size: 12px;
    a {
        color: white;
        text-decoration: none;
        border: none;
        border-bottom: 1px solid black;
        box-shadow: none;
        display: list-item;
    }
    nav {
        position: relative;
        right: 20%;
        bottom: 30px;
    }
    a:hover {
        background-color: black;
    }
  }
  .grid-item {
      padding-left: 20px;
  }
  .grid-1c {
      position: relative;
      right: 30px;
  }
  .grid-portfolio {
    position: relative;
    right: 30px;
  }
  .grid-social {
      padding-left: 20px;
      padding-right: 40px;
  }
  .contact-grid {
      padding: 10px;
      p {
          padding: 10px;
      }
  }
  #introtext {
    padding-left: 20px;
    padding-right: 50px;
    margin: 0;
    text-align: left;
  }
  .about-content {
      img {
          max-width: 250px;
          max-height: 250px;
      }
  }
  #button {
      position: relative;
      top: 10px;
      left: 110px;
  }
  .home-portfolio {
      padding-left: 30px;
      img {
        max-width: 250px;
        max-height: 250px;
      }
      }
    .portfolio-main {
        text-align: center;
        img {
            max-width: 250px;
            max-height: 250px;
        }
    }
    .headshot {
        text-align: left;
    }
}

//This is the CSS for Tablet View //

//The CSS below applies to devices with a screen size between 768 and 1023 px. This is important as it addresses tablet devices.
//There are a lot of ID's used to control image size to ensure all of the content fits tablet screen view. 
//There is also CSS hiding the top bar and menu on smaller screen sizes. 
//Additionally there is CSS to style the hamburger menu and control how it displays on click.

@media only screen and (min-width: 768px) and (max-width: 1023px) {
    #introtext {
        margin-right: 50px;
        margin-top: 0;
    }
    #empty-divs {
        display: none;
    }
    #headshot {
        max-width: 300px;
        max-height: 300px;
    }
    #footer1 {
        display: none;
    }
    .grid-footer {
        padding-right: 30px;
    }
    .social {
        display: none;
    }
    #logotext {
        display: none;
    }
    .navgrid-flexend {
        display: none;
      }
    .home-portfolio {
        img {
            max-width: 200px;
            max-height: 200px;
        }
    }
    .hamburger {
        position: absolute;
        left: 80%;
        top: 2%;
    }
    .nav {
        color: white;
        font-size: 12px;
        a {
            color: white;
            text-decoration: none;
            border: none;
            border-bottom: 1px solid black;
            box-shadow: none;
            display: list-item;
        }
        nav {
            position: relative;
            right: 20%;
            bottom: 30px;
        }
        a:hover {
            background-color: black;
        }
    }
    #about {
        text-align: center;
        button {
            margin-top: 20px;
        }
        img {
            margin-top: 20px;
            max-width: 350px;
            max-height: 350px;
        }
    }
}

//Grid to contain and position my content. The repeat and auto fit allows for the columns to fit multiple screensizes and stack automatically on smaller screens. //
  .grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    background-color: black;
    text-align: center;
  }

  //This is the grid used to contain the navigation bar. I've used three columns to contain the content which I've then styled using additional classes.
  .navgrid {
      display: grid;
      grid-template-columns: auto auto auto;
      background-color: $primary-color;
      font-size: 20px;
  }

//This styling helps my navigation menu have some more spacing inbetween the elements.
  .navgrid-item {
      display: flex;
      justify-content: space-evenly;
  }
//The grid format below will automatically create as many even columns as I create in my div. It will also automatically stack neatly across devices if the windows are brought in.
.grid-portfolio {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    background-color: black;
    grid-gap: 50px;
  }

//I've added an ID to my twitter widget to override the sizing automatically applied by Twitter. This is used to position the content similar to the LinkedIn profile for design.
  #twitter-widget-0 {
      max-width: 450px !important;
      max-height: 350px !important;
  }

//The grid format below will automatically create as many even columns as I create in my div. It will also automatically stack neatly across devices if the windows are brought in.
  .grid-1c {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    background-color: black;
    margin-top: 30px;
  }

//The grid format below will automatically create as many even columns as I create in my div. It will also automatically stack neatly across devices if the windows are brought in.
.grid-social {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    background-color: black;
    margin-bottom: 50px;
    margin-top: 30px;
    text-align: center;
  }
//This CSS uses the grid property to control the layout of the div content. It also includes various styling on the elements within that div.
  .grid-footer {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    background-color: $primary-color;
    a {
        color: white;
        text-decoration: none;
    }
    a:hover {
        color: black;
    }
    div {
        text-align: left;
        margin-left: 50px;
    }
  }

//The copyright section needed to have independent styling that applys a different style of styling to the rest of the website.
  .copyright {
    font-family: 'Poppins', sans-serif;
    font-size: 14px;
    text-align: center;
    padding: 15px;
    background-color: #218083;
  }

  //Flex Grid to organise the contact form section content. Using flex to center align the content which will then shrink to fit multiple devices. //
  .contact-grid {
      display: flex;
      flex-direction: column;
      text-align: center;
      background-color: grey;
      padding-bottom: 30px;
      margin: 0;
      color: white;
  }

  //Styling the contact form with flexbox and multiple styles on all fields. //
  .contact {
      color: black;
      display: flex;
      flex-direction: column;
      align-items: center;
      form, label, input, textarea, button {
          width: 250px;
          padding: 10px;
          margin: 5px;
      }
      input {
          border: none;
          border-bottom: 2px white solid;
          background-color: transparent;
          color: white;
          font-size: 16px;
      }
      button {
          margin-top: 20px;
      }
      label {
          @include mainfont;
      }
      button:hover {
        background-color: transparent;
        border: 2px solid $primary-color;
      }
      textarea {
        font-family: 'Poppins', sans-serif;
      }
  }

//This styling utilises CSS Grid to control the content layout. It also includes a mixin and element styling to dictate the styling of the divs elements.
.blog-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    @include mainfont();
    div {
        margin: 20px;
    }
    p {
        @include blogfont();
    }
}

//CSS to style the intro div on my blog.
.blog-intro {
    text-align: center;
    margin: 0;
}

//CSS to style the layout and content format of my portfolio page.
.portfolio-main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    text-align: center;
}

//This CSS uses grid to structure my content. I've then stylied the individual elements in the div using SCSS syntaxes alongside vanilla CSS.
.about-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    h3 {
        text-align: center;
        text-decoration: underline;
        text-underline-position: under;
        text-decoration-color: $primary-color;
    }
    h4 {
        text-align: center;
    }
    p {
        text-align: center;
        margin: 10px;
        padding-left: 20px;
    }
}

//Using a CSS class to force the on page content into the center of the div.
.home-portfolio {
    text-align: center;
}

//Using CSS to control the image sizes on my portfolio page.
.portfolio-img {
    max-width: 600px;
}

//Using CSS to control the about image and ensure it center aligns across all devices and has appropriate padding between it and the PDF button below.
#about {
    text-align: center;
    button {
        margin-top: 20px;
    }
    img {
        margin-top: 20px;
    }
}